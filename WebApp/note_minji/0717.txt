[ Servlet Life Cycle ]

1. 로딩
   - 서블릿 컨테이너(톰캣)가 서블릿 클래스를 로드
   - 처음 한 번만 수행

2. 인스턴스화
   - 서블릿 컨테이너가 서블릿 클래스의 인스턴스(객체)를 생성
   - 서블릿 클래스는 init() 메서드 호출
   - init() : 초기화 작업 수행

3. 초기화
   - init() 메서드 호출로 서블릿 초기화
   - 서블릿이 처음 요청될 때 한 번만 호출
   
4. 요청 처리
   - 클라이언트 요청이 들어오면 서블릿 컨테이너가 service() 메서드 호출
   - service(): 요청 처리, 응답 생성
   - HTTP GET, POST 등의 메서드에 따라 `doGet()`, `doPost()` 등의 메서드 호출
   
5. 소멸
   - 서블릿 컨테이너가 서블릿 인스턴스를 제거하기 전에 `destroy()` 메서드를 호출
   - 주로 데이터베이스 연결 해제, 리소스 반환 등의 작업을 수행
   
   init() service() destroy() 개발자가 오버라이드 해서 사용 가능
   
   
   [ Thread vs. Multi Process ]
   
   프로그램은 HDD에 존재
   프로그램이 주기억장치에 로드 되면 프로세스
   
   멀티태스킹
   cpu 공간, 자원을 나눠주는 것 X
   cpu 시간을 나눠주는 것 O (시분할)
   
   OS가 시분할을 통해 프로세스 동시 실행
   OS가 작업스케줄링
   
   Thread : 하나의 사람이 여러가지를 동시에 작업
   Multi Process : 여러 사람이 각자 일을 하는 것


	[ 동기화 vs. 비동기화 ]
	동기화 : 순서를 부여시키려는 것
	비동기화 : 순차적 처리 x   
	
	동기 : 호출한 작업이 완료될 때까지 대기하는 방식
		  순차적으로 실행
	비동기 : 호출한 작업이 완료될 때까지 기다리지 않고 다른 작업을 수행할 수 있는 방식
  
  
 	[ Thread ]
 	프로세스 내에서 실행되는 하나의 실행 흐름
  	주요 메소드 : start()
  				 run()
  				 sleep()
  	상태값 : NEW
  			 RUNNABLE
  			 WAITING
  		 
  	Thread 동기화 : 여러 thread가 공유 자원에 접근할 때 문제 방지
  				동기화 개념필요  
  
 	java : multi thread를 지원 (여러 thread가 동시 실행)
  
  	자바 thread는 멀티 코어 processor로 병렬처리
  	여러 작업 동시처리
  
	병렬 처리가 가능해지므로 CPU 자원을 효율적으로 사용
  	동기화와 관련된 문제들을 고려하여 멀티스레드 프로그래밍을 설계하고 구현하는 것은 중요한 과제
  
  	프로그램 내에서 독립적인 실행 흐름을 만들어주는 작업단위
  	독립적인 실행 흐름을 생성하여 여러 작업을 병렬적으로 처리
  	각 스레드는 독립적으로 실행
	다른 스레드와 동시에 작업을 수행
  
  
  	Thread 생성 : Thread 클래스를 상속받거나 Runnable 인터페이스를 구현
  	start() 메서드를 호출하여 스레드를 시작
	자바 가상 머신(JVM)이 스케줄링을 통해 해당 스레드를 실행
	스레드는 병렬 처리나 비동기 작업을 구현하는 데 사용

[ HashSet ]
	Set : 집합의 의미
	Set 인터페이스의 구현 클래스
	저장 순서 X
	중복값 허용 X
	순서 유지하려면 LinkedHashSet 클래스

	ex) Set<String> set = new HashSet<String>();

[ EL (Expression Language) ]

JSP에서 사용하는 표현 언어
웹 애플리케이션에서 데이터를 표현하고 접근하는 데 사용

${} : 데이터를 표현하고 접근
${user.name} 형식으로 사용자 객체의 이름 속성에 접근



[ JSP ]
	-	JavaServer Pages
	-	서버 측에서 동적 웹 페이지를 생성하기 위한 기술
	-	HTML 내에 Java 코드를 포함하여 웹 페이지를 생성

[ JSTL ]
	-	JSP에서 자주 사용되는 반복, 조건 처리, 데이터 출력 등을 단순화하기 위한 태그 라이브러리
	-	종류 
		<c:forEach> : 컬렉션을 반복하며 요소를 처리
		<c:if> 		: 조건문을 처리하여 조건에 따라 다른 콘텐츠를 출력
		<c:choose>, <c:when>, <c:otherwise>	: 다중 조건을 처리합니다.
		<c:set>, <c:remove>: 변수의 설정과 제거를 처리

[ Maven ]
Java 프로젝트의 라이프사이클 관리와 빌드 자동화를 위한 도구
only 빌드만 제공
IDE에서 빌드하면 IDE에 종속된 결과물
IDE끼리 호환이 되지 않는다
그래서 유연한, 의존성 없는 빌드툴

[ Collection ]
데이터 그룹을 관리하기 위한 Java 프레임워크의 인터페이스와 클래스들
배열과 달리 요소 개수가 동적
 객체를 그룹으로 관리
 
[ List 인터페이스 ] 
순서가 있는 데이터의 집합
중복된 요소를 허용

class : ArrayList, LinkedList

[ Generic ]
-	타입 안전성을 보장
-	컴파일 시점에서 타입 검사를 수행하여 잘못된 타입의 요소가 리스트에 추가되는 것을 방지
-	인터페이스나 클래스가 아닌 타입 시스템의 일부
-	제네릭은 클래스, 인터페이스, 메서드 등에서 사용될 수 있습니다.
-	제네릭을 사용하면 Object를 사용할 때와 달리 객체의 타입을 컴파일 타임에 체크할 수 있어서 타입 안정성
-	형변환의 번거로움이 줄어든다

ex)
List<String> : 문자열만을 저장하는 리스트 생성
			   문자열 이외의 다른 타입을 추가하면 컴파일 오류 발생
			   get() 메서드로 가져온 요소는 자동으로 String 타입으로 캐스팅

[ Objcet 클래스 ]
-	Object 클래스는 모든 자바 클래스의 최상위 클래스 
-	모든 클래스는 Object 클래스를 상속받는다
-	모든 객체는 Object 클래스의 메서드를 사용할 수 있다


[ Set 인터페이스 ]
-	순서가 없음
-	중복된 요소 허용 X
-	데이터의 집합
-	class : HashSet, TreeSet

[ Map 인터페이스 ]
-	Key-Value 쌍으로 데이터를 관리하는 인터페이스
-	Key는 중복될 수 없음
-	Value는 중복될 수 있음 
-	class : HashMap, TreeMap