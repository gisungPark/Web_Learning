[ 추상화 (Abstract) ]
	-	여러 개체에서 공통적인 툭성을 추출
	-	완저하지 않은 메서드를 포함
		=	추상 메서드
		=	구현이 없는 메서드
		=	추상클래스 내부에 선언된 메서드
	-	추상 클래스에서 직접 객체 생성 불가
	-	하위 클래스에서 오버라이드로 추상 메서드 오버라이드
	-	하위 클래스는 추상 클래스를 부모로서 상속받음

==============================================================

[ 추상 클래스 ]
	-	공통분모를 모아둔 클래스
	-	뼈대 클래스
	-	자식 클래스들은 반드시 추상 클래스의 메서드 재정의 필요 (Override)
	
	
==============================================================

[ 캡슐화 ]
	-	외부로 부터 접근 제어
	-	 클래스의 내부 구현을 외부에서 접근하지 못하도록 하는 역할
		-	private		:	해당클래스 내에서만 접근가능
		-	public		:	어디서든 접근가능
		-	protected	:	같은 패키지 내에서 접근가능

==============================================================

[ has a 관계 ]
	-	클래스가 다른 클래스를 포함하는 관계
	
[ is a 관계 ]
	-	상속
	-	한 클래스가 다른 클래스의 자식

==============================================================

[ Servlet Lifecycle ]
	-	서블릿 컨테이너 (tomcat)에 의해 결정됨
	-	클라이언트 요청에 따라 servlet 객체 생성

	1. 로딩
		-	서블릿 컨테이너 (tomcat)이 servlet 클래스를 로딩
	2. 인스턴스화
		-	servlet 인스턴스(객체) 생성 : Thread
		-	init() 호출 : 초기화 작업
	3. 요청처리
		-	요청에 대해 service() 호출
		-	service()	:	http요청 처리
							클라이언트에게 응답 반환
							doGet, doPost 등 http 메서드에 따라
							적절한 메서드 호출
	4. 소멸
		-	tomcat이 servlet 인스턴스(객체)가 더이상 팔요않으면
			destroy() 호출
			
==============================================================

[ Thread ]

	-	작업 간 데이터 공유가 필요할 때
	-	작업 전환 속도가 중요할 때
	-	자원 소모를 줄이고 싶을 때

	-	하나의 사람이 여러 가지 일을 동시에 처리하는 것
	-	하나의 사람(프로세스)이 여러 작업(쓰레드)을 동시에 수행
	-	웹 브라우저에서 여러 탭을 동시에 열어 여러 웹페이지를 동시에 로드하는 것 (하나의 프로세스에서 여러 쓰레드가 작업을 동시에 수행)

[ Multi-Process ]

	-	각 작업이 독립적이어야 할 때
	-	각 프로세스의 안정성이 중요할 때
	-	각 프로세스가 별도의 자원을 할당받아야 할 때

	-	여러 사람이 각자의 일을 별도로 처리하는 것
	-	각자의 사람(프로세스)이 독립적으로 일을 처리하며, 각자의 고유한 자원(메모리 공간)을 가지는 것
	-	여러 사용자가 각자의 컴퓨터에서 독립적으로 작업을 수행(각 프로세스가 독립적으로 실행)
